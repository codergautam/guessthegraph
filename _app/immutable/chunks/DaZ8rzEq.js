import{_ as x,K as l,$ as f}from"./BnrCCFMJ.js";const m=x(null);function u(s,c,t){return new Promise((r,n)=>{let e=t.HelperExpression({latex:s+"("+c+")"});e.observe("numericValue",function(){r(e.numericValue)})})}async function b(){const s=l(m),t=[-5,-4,-3,-2,-1,0,1,2,3,4,5].map(e=>Promise.all([u("f",e,s),u("g",e,s)]).then(([o,i])=>({i:e,val1:o,val2:i}))),r=await Promise.all(t);let n=!0;for(const{i:e,val1:o,val2:i}of r)if(!(isNaN(o)||isNaN(i))&&(n=!1,Math.abs(o-i)>1e-4))return!1;return n?"NaN":!0}const S={easy:[{expression:"x^2",description:"Quadratic Function"},{expression:"2x+3",description:"Linear Function"},{expression:"\\sin(x)",description:"Sine Function"},{expression:"\\abs(x)",description:"Absolute Value Function"},{expression:"3",description:"Constant Function"},{expression:"x",description:"Identity Function"},{expression:"x+1",description:"Simple Linear Function"},{expression:"\\cos(x)",description:"Cosine Function"},{expression:"\\tan(x)",description:"Tangent Function (basic)"},{expression:"\\sqrt{x}",description:"Square Root Function"},{expression:"x^3",description:"Simple Cubic Function"},{expression:"5",description:"Constant Function"},{expression:"x-4",description:"Linear Subtraction"},{expression:"-x",description:"Negative Identity Function"},{expression:"4x",description:"Simple Scaling Function"},{expression:"\\frac{x}{2}",description:"Simple Fractional Function"},{expression:"\\sin(2x)",description:"Scaled Sine Function"},{expression:"\\cos(2x)",description:"Scaled Cosine Function"},{expression:"x^2+1",description:"Shifted Quadratic"},{expression:"x^2-1",description:"Quadratic Minus One"},{expression:"2",description:"Constant Function Two"},{expression:"\\sin(x)+1",description:"Shifted Sine"},{expression:"\\cos(x)-1",description:"Shifted Cosine"},{expression:"\\frac{1}{2}x",description:"Half of x"},{expression:"x^4",description:"Quartic Function"},{expression:"x^2 + x",description:"Quadratic plus Linear"},{expression:"3x - 5",description:"Linear Function with negative shift"},{expression:"\\frac{x}{4}",description:"Quarter of x"},{expression:"7",description:"Constant Seven"},{expression:"\\sqrt{x+1}",description:"Shifted Square Root"},{expression:"\\frac{1}{x}",description:"Basic Reciprocal Function"},{expression:"\\sin(x)-1",description:"Sine minus one"},{expression:"\\cos(x)+1",description:"Cosine plus one"},{expression:"-2x",description:"Negative scaled Linear"},{expression:"\\sqrt{x}+2",description:"Square root plus two"},{expression:"\\frac{x}{3}",description:"Third of x"},{expression:"-x^2",description:"Negative Quadratic"},{expression:"\\frac{x^2}{2}",description:"Quadratic divided by two"},{expression:"2x^2",description:"Squeezed Parabola"},{expression:"x^3+1",description:"Cubic plus one"},{expression:"x^3-1",description:"Cubic minus one"},{expression:"x+10",description:"Linear shifted by ten"},{expression:"\\frac{1}{x+1}",description:"Shifted Reciprocal"},{expression:"-3x",description:"Negative triple scaling"}],medium:[{expression:"x^3-2x",description:"Cubic Function"},{expression:"\\tan(x)",description:"Tangent Function"},{expression:"x^0.5",description:"Square Root"},{expression:"1/x",description:"Reciprocal Function"},{expression:"e^x",description:"Exponential Function"}],hard:[{expression:"\\sin(x)/x",description:"Sinc Function"},{expression:"\\ln(\\abs(x))",description:"Natural Log"},{expression:"x^2*\\sin(x)",description:"Product Function"},{expression:"\\frac{1}{(1+e^{-x})}",description:"Logistic Function",readableExpression:"1/(1+e^(-x))"},{expression:"\\floor(x)",description:"Floor Function"}]};function F(){const s={isPlaying:!1,difficulty:null,currentRound:0,totalRounds:5,currentFunction:null,functions:[],startTime:null,roundStartTime:null,points:0,roundsHistory:[],gameState:"idle"},{subscribe:c,set:t,update:r}=x(s);return{subscribe:c,update:r,useHint:()=>{r(n=>({...n,roundStartTime:n.roundStartTime-1e4,hintUsed:!0}))},startGame:n=>{r(e=>{const o=[...S[n]];for(let i=o.length-1;i>0;i--){const a=Math.floor(Math.random()*(i+1));[o[i],o[a]]=[o[a],o[i]]}return{...s,isPlaying:!0,difficulty:n,functions:o,startTime:Date.now(),gameState:"playing"}})},startNextRound:()=>{r(n=>{const e=n.currentRound+1;return e>n.totalRounds?{...n,gameState:"gameOver"}:{...n,currentRound:e,currentFunction:n.functions[e-1],roundStartTime:Date.now(),hintUsed:!1,gameState:"playing"}})},checkAnswer:n=>{r(e=>{const i=(Date.now()-e.roundStartTime)/1e3;let a=1e3,p=n?Math.max(0,Math.round(a*(1-Math.min(i,180)/180))):0;i<2&&(p=a);const d={round:e.currentRound,function:e.currentFunction,timeSpent:i,isCorrect:n,points:p};return{...e,points:e.points+p,roundsHistory:[...e.roundsHistory,d],gameState:n?"roundOver":"playing"}})},resetGame:()=>t(s)}}const g=F(),v=f(g,(s,c)=>{let t;return s.gameState==="playing"&&s.roundStartTime&&(t=setInterval(()=>{c((Date.now()-s.roundStartTime)/1e3)},100)),()=>{t&&clearInterval(t)}},0);export{b as a,v as b,m as c,g};
